{
    "openapi": "3.0.0",
    "info": {
        "title": "Esplora REST API",
        "version": "1.0.0",
        "description": "OpenAPI spec for core Esplora endpoints: blocks, transactions, addresses, mining info, mempool, fees, UTXO data and more.\n"
    },
    "servers": [
        {
            "url": "http://xbt-mainnet.gomaestro-api.org/v0/esplora"
        },
        {
            "url": "http://xbt-testnet.gomaestro-api.org/v0/esplora"
        }
    ],
    "paths": {
        "/address/{address}": {
            "get": {
                "summary": "Address",
                "description": "Returns details about an address. Available fields: address, chain_stats, and mempool_stats. chain_stats and mempool_stats each contain an object with tx_count, funded_txo_count, funded_txo_sum, spent_txo_count, and spent_txo_sum.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Bitcoin address to query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address information returned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressInfo"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    }
                }
            }
        },
        "/address/{address}/txs": {
            "get": {
                "summary": "Get address transactions",
                "description": "Returns a list of confirmed and unconfirmed transactions for a Bitcoin address, sorted with the most recent first.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Bitcoin address to query."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of transactions related to the address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Transaction"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid address"
                    },
                    "404": {
                        "description": "Address not found"
                    }
                },
                "tags": ["Addresses"]
            }
        },
        "/address/{address}/txs/chain": {
            "get": {
                "summary": "Get confirmed address transaction history",
                "description": "Returns up to 25 confirmed transactions for the given address, ordered from newest to oldest. To fetch the next page of results, use the last seen txid from the previous response as the `last_seen_txid` query parameter.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "description": "The Bitcoin address to query.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_seen_txid",
                        "in": "query",
                        "required": false,
                        "description": "The txid of the last transaction from the previous response. Used for pagination.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of confirmed transactions for the given address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Transaction"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid address or txid"
                    },
                    "404": {
                        "description": "Address not found"
                    }
                },
                "tags": ["Addresses"]
            }
        },
        "/address/{address}/txs/mempool": {
            "get": {
                "summary": "Get address mempool transactions",
                "description": "Returns unconfirmed (mempool) transactions for the given Bitcoin address. Limited to the most recent 50 transactions.",
                "tags": ["Addresses"],
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Bitcoin address whose unconfirmed transactions should be retrieved."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of mempool transactions associated with the address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Transaction"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid address format."
                    },
                    "404": {
                        "description": "Address not found or no unconfirmed transactions."
                    }
                }
            }
        },
        "/address/{address}/utxo": {
            "get": {
                "summary": "Get address UTXOs",
                "description": "Returns the list of unspent transaction outputs (UTXOs) associated with a Bitcoin address.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "description": "The Bitcoin address to query.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of UTXOs for the address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Utxo"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid address"
                    },
                    "404": {
                        "description": "Address not found"
                    }
                },
                "tags": ["Addresses"]
            }
        },
        "/address/{address}/validate": {
            "get": {
                "summary": "Validate Bitcoin address",
                "description": "Checks whether a given string is a valid Bitcoin address on the current network.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Bitcoin address to validate."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validation result",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressValidation"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or malformed address"
                    }
                },
                "tags": ["Addresses"]
            }
        },
        "/block/{hash}": {
            "get": {
                "summary": "Get block by hash",
                "description": "Returns information about a specific block, including its metadata but not full transaction data.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000a16e7f42c2edb702c8e5c68dc06782a82c4e6be5b0b7d"
                        },
                        "description": "The block hash to retrieve information for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Block"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/block/{hash}": {
            "get": {
                "summary": "Get block details",
                "description": "Returns detailed information for a specific block by its hash.",
                "tags": ["Blocks"],
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The block hash to query."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block data retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Block"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found."
                    }
                }
            }
        },
        "/block/{hash}/header": {
            "get": {
                "summary": "Get block header (hex)",
                "description": "Returns the raw hex-encoded header of a block by its hash. This is a 160-character hexadecimal string representing the 80-byte block header.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000b4d0d437d0cd028cb7f19dc5d7e5e6aa06254f19ac7f6"
                        },
                        "description": "The hash of the block to retrieve the header for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw block header as hex",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockHeader",
                                    "type": "string",
                                    "example": "00000020e91f...2d1e4dbb65"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block hash"
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/block/{hash}/status": {
            "get": {
                "summary": "Get block status",
                "description": "Returns status data about a given block, including whether it is in the best chain and what block follows it.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "The block hash to query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block status response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockStatus"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block hash"
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/block/{hash}/txs": {
            "get": {
                "summary": "Get block transactions",
                "description": "Returns a list of transactions in the block with the specified hash. Returns up to 25 transactions per call. Optional query param `start_index` controls pagination.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "The block hash.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "start_index",
                        "in": "query",
                        "required": false,
                        "description": "Index to start fetching transactions from (pagination).",
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of transactions in the block.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Transaction"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/block/{hash}/txids": {
            "get": {
                "summary": "Returns a list of all txids in the block.",
                "description": "Returns a list of all transaction IDs (txids) in the specified block.",
                "tags": ["Blocks"],
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The hash of the block to query."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of transaction IDs in the block.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockTxids"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block hash."
                    },
                    "404": {
                        "description": "Block not found."
                    }
                }
            }
        },
        "/block/{hash}/txid/{index}": {
            "get": {
                "summary": "Get transaction ID by block and index",
                "description": "Returns the transaction ID at the specified index in the block.",
                "tags": ["Blocks"],
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "The block hash.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "index",
                        "in": "path",
                        "required": true,
                        "description": "The transaction index within the block.",
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction ID at the specified index",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionId"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block hash or index"
                    },
                    "404": {
                        "description": "Block or transaction not found"
                    }
                }
            }
        },
        "/block/{hash}/raw": {
            "get": {
                "summary": "Get raw block data",
                "description": "Returns the raw block data in binary form for a given block hash.",
                "tags": ["Blocks"],
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "The hash of the block",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw block data in binary format",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block hash"
                    },
                    "404": {
                        "description": "Block not found"
                    }
                }
            }
        },
        "/blocks/{start_height}": {
            "get": {
                "summary": "Blocks",
                "description": "Returns 10 blocks starting from the specified block height and going backwards.",
                "parameters": [
                    {
                        "name": "start_height",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The block height to start from."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of 10 blocks starting from the given height",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Block"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block height"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/blocks": {
            "get": {
                "summary": "Get recent blocks",
                "description": "Returns a list of the most recent blocks. Default is the latest 10 blocks mined.",
                "tags": ["Blocks"],
                "responses": {
                    "200": {
                        "description": "A list of recent blocks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BlockV1"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/block-height/{height}": {
            "get": {
                "summary": "Get block hash by height",
                "description": "Returns the block hash of the block at the specified height.",
                "parameters": [
                    {
                        "name": "height",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "example": 804000
                        },
                        "description": "The height of the block."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block hash as plain text.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "00000000000000000001880a9ce60cd1f88b0d1c61bb5a1d6276acfa3536c9e5"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid block height supplied."
                    },
                    "404": {
                        "description": "Block not found for the given height."
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/blocks-bulk/{minHeight}/{maxHeight}": {
            "get": {
                "summary": "Get detailed stats for a block range between minHeight and maxHeight; if maxHeight is not specified, it defaults to the current tip.",
                "description": "Returns stats for up to 10 blocks between `minHeight` and `maxHeight`, inclusive. If `maxHeight` exceeds the current tip, the response is limited to available blocks.",
                "parameters": [
                    {
                        "name": "minHeight",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "maxHeight",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed statistics on blocks in the requested height range.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockStatsArray"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid range or block limit exceeded"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/blocks/tip/height": {
            "get": {
                "summary": "Get block tip height",
                "description": "Returns the height of the tip of the best (most-work) blockchain.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockHeight"
                                }
                            }
                        }
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/blocks/tip/hash": {
            "get": {
                "summary": "Get tip block hash",
                "description": "Returns the hash of the most recent block in the best blockchain.",
                "responses": {
                    "200": {
                        "description": "Block hash string of the latest block",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockHash"
                                }
                            }
                        }
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/mining/pools": {
            "get": {
                "summary": "Get mining pool stats",
                "description": "Returns a list of recent blocks and the corresponding identified mining pools.",
                "responses": {
                    "200": {
                        "description": "List of mining pools and their recent block counts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MiningPool"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/pool/{slug}": {
            "get": {
                "summary": "Returns details about the mining pool specified by :slug.",
                "description": "Returns details about the mining pool specified by :slug.",
                "parameters": [
                    {
                        "name": "address",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The payout address used by the mining pool."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Mining pool metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MiningPool"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No known mining pool associated with the address"
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/hashrate/pools/{time_period}": {
            "get": {
                "summary": "Mining Pool Hashrates",
                "description": "Returns average hashrates (and share of total hashrate) of mining pools active in the specified trailing :timePeriod, in descending order of hashrate. Leave :timePeriod unspecified to get all available data, or specify any of the following time periods: 1m, 3m, 6m, 1y, 2y, 3y.",
                "responses": {
                    "200": {
                        "description": "A list of mining pools with hashrate data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MiningPool"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/pools/{slug}/hashrate": {
            "get": {
                "summary": "Mining Pool Hashrate",
                "description": "Returns all known hashrate data for the mining pool specified by :slug. Hashrate values are weekly averages.",
                "responses": {
                    "200": {
                        "description": "Hashrate distribution by mining pool.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MiningPoolHashrate"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/pool/{slug}/blocks/{block_height}": {
            "get": {
                "summary": "Mining Pool Blocks",
                "description": "Returns past 10 blocks mined by the specified mining pool (:slug) before the specified :blockHeight. If no :blockHeight is specified, the mining pool's 10 most recent blocks are returned.",
                "responses": {
                    "200": {
                        "description": "A list of mining pools with block counts.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MiningPool"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/hashrate/{time_period}": {
            "get": {
                "summary": "Hashrate",
                "description": "Returns network-wide hashrate and difficulty figures over the specified trailing :timePeriod:\n\n- Current (real-time) hashrate\n- Current (real-time) difficulty\n- Historical daily average hashrates\n- Historical difficulty\n\nValid values for :timePeriod are 1m, 3m, 6m, 1y, 2y, 3y. If no time interval is specified, all available data is returned.\n\nBe sure that INDEXING_BLOCKS_AMOUNT is set properly in your backend config so that enough blocks are indexed to properly serve your request.",
                "tags": ["Mining"],
                "responses": {
                    "200": {
                        "description": "Hashrate data returned successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HashrateData"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/mining/difficulty-adjustments/{interval}": {
            "get": {
                "summary": "Difficulty Adjustments",
                "description": "Returns the record of difficulty adjustments over the specified trailing :interval:\n\n- Block timestamp\n- Block height\n- Difficulty\n- Difficulty change\n\nIf no time interval is specified, all available data is returned.",
                "responses": {
                    "200": {
                        "description": "Difficulty adjustment info returned successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DifficultyAdjustment"
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/reward-stats/{block_count}": {
            "get": {
                "summary": "Reward Stats",
                "description": "Returns the current Bitcoin block subsidy, fee reward, and the total block reward based on recent blocks.",
                "responses": {
                    "200": {
                        "description": "Block reward statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RewardStats"
                                }
                            }
                        }
                    }
                },
                "tags": ["Mining"]
            }
        },
        "/v1/mining/blocks/fees/{time_period}": {
            "get": {
                "summary": "Block Fees",
                "description": "Returns aggregate fee, fee rate, and vsize statistics for all transactions in a block (excluding the coinbase).",
                "tags": ["Blocks"],
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "Block hash to retrieve fee data for.",
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000839fdf3b4d6c2a0620f61722a0c4d960a3b7e1a64432e"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block fee data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockFeeSummary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                }
            }
        },
        "/v1/mining/blocks/rewards/{time_period}": {
            "get": {
                "summary": "Block Rewards",
                "description": "Returns the total block reward, including the block subsidy and total fees (in satoshis).",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000bba951d26c9c91b97e2b6d04d13c0f99e06ae95a68e0d"
                        },
                        "description": "The hash of the block to get the reward for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Block reward data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockReward"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/mining/blocks/fee-rates/{time_period}": {
            "get": {
                "summary": "Block Feerates",
                "description": "Returns average feerate percentiles for blocks in the specified :timePeriod, ordered oldest to newest. :timePeriod can be any of the following: 24h, 3d, 1w, 1m, 3m, 6m, 1y, 2y, 3y.\nFor 24h and 3d time periods, every block is included and percentiles are exact (not averages). For the 1w time period, percentiles may be averages depending on how fast blocks were found around a particular timestamp. For other time periods, percentiles are averages.",
                "parameters": [
                    {
                        "name": "block_hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000c6b5c5ed19466aeeb5e5582275c3e4f257f879b548efb"
                        },
                        "description": "The hash of the block to retrieve fee rates for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of transaction fee rates in the block (sat/vB).",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeeRateList"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/mining/blocks/sizes-weights/{time_period}": {
            "get": {
                "summary": "Block Sizes and Weights",
                "description": "Returns average size (bytes) and average weight (weight units) for blocks in the specified :timePeriod, ordered oldest to newest. :timePeriod can be any of the following: 24h, 3d, 1w, 1m, 3m, 6m, 1y, 2y, 3y.\nFor 24h and 3d time periods, every block is included and figures are exact (not averages). For the 1w time period, figures may be averages depending on how fast blocks were found around a particular timestamp. For other time periods, figures are averages.",
                "responses": {
                    "200": {
                        "description": "A list of daily average block size and weight statistics.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BlockSizeWeightStat"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/mining/blocks/predictions/{time_period}": {
            "get": {
                "summary": "Block Predictions",
                "description": "Returns predicted blocks based on current mempool transactions, ordered by fee rate. Each object represents a potential next block with aggregated transaction stats.",
                "responses": {
                    "200": {
                        "description": "A list of predicted next blocks based on current mempool state.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MempoolBlockPrediction"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Fees", "Blocks", "Mempool"]
            }
        },
        "/v1/mining/blocks/audit/score/{block_hash}": {
            "get": {
                "summary": "Block Audit Score",
                "description": "Returns audit metadata about a block, including its score based on validation properties.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "00000000000000000002b76ad4d92c98392c4aefb87dbb4564a2d1e84c54f342"
                        },
                        "description": "The block hash to retrieve audit data for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit metadata and score for the block.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockAudit"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/mining/blocks/audit/scores/{start_height}": {
            "get": {
                "summary": "Blocks Audit Scores",
                "description": "Returns blocks audit score for the past 16 blocks. If :startHeight is specified, the past 15 blocks before (and including) :startHeight are returned. Available fields: hash, matchRate, expectedFees, and expectedWeight.",
                "responses": {
                    "200": {
                        "description": "List of audit scores for recent blocks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AuditScore"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/v1/block/{block_hash}/audit-summary": {
            "get": {
                "summary": "Block Audit Summary",
                "description": "Returns the block audit summary for the specified :blockHash. Available fields: height, id, timestamp, template, missingTxs, addedTxs, freshTxs, sigopTxs, fullrbfTxs, acceleratedTxs, matchRate, expectedFees, and expectedWeight.",
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "0000000000000000000a16f1e13eb703e6a07bce4b7dbde90740b0425f9b7b95"
                        },
                        "description": "Block hash to retrieve the audit summary for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audit data for the block.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlockAuditSummary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Block not found"
                    }
                },
                "tags": ["Blocks"]
            }
        },
        "/mempool": {
            "get": {
                "summary": "Mempool",
                "description": "Returns current mempool backlog statistics.",
                "responses": {
                    "200": {
                        "description": "Aggregated mempool data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MempoolStats"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "count": 8134,
                                            "vsize": 3444604,
                                            "total_fee": 29204625,
                                            "fee_histogram": [
                                                [53.01, 102131],
                                                [38.56, 110990],
                                                [34.12, 138976],
                                                [24.34, 112619],
                                                [3.16, 246346],
                                                [2.92, 239701],
                                                [1.1, 775272]
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/mempool/txids": {
            "get": {
                "summary": "Mempool Transaction IDs",
                "description": "Get the full list of txids in the mempool as an array. The order of the txids is arbitrary and does not match bitcoind.",
                "responses": {
                    "200": {
                        "description": "List of transaction IDs currently in the mempool.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MempoolTxids"
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            "4d3c8f5b2378c9c1eaa228d594d2c693fae3e9f2b3e6b18344f973f1e5a3e13a",
                                            "5a76bcb30e10a7d5f6a8f37d7df12a89f4e171cf0ecfe5bd5d22b53f5cc9f6cf"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/v1/replacements": {
            "get": {
                "summary": "Mempool RBF Transactions",
                "description": "Returns the list of mempool transactions that are part of a RBF chain.",
                "responses": {
                    "200": {
                        "description": "RBF replacement metadata for the transaction",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RbfReplacementRoot"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found or not eligible for RBF data"
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/v1/fullrbf/replacements": {
            "get": {
                "summary": "Mempool Full RBF Transactions",
                "description": "Returns the list of mempool transactions that are part of a Full-RBF chain.",
                "responses": {
                    "200": {
                        "description": "Full-RBF statistics from the mempool.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FullRbfStats"
                                }
                            }
                        }
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/mempool/recent": {
            "get": {
                "summary": "Mempool Recent",
                "description": "Returns the last 10 transactions that entered the mempool, with simplified metadata.",
                "responses": {
                    "200": {
                        "description": "A list of recent mempool transactions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MempoolRecentTx"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "txid": "f3c21f...",
                                                "fee": 426,
                                                "vsize": 141,
                                                "value": 12500
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/v1/fees/mempool-blocks": {
            "get": {
                "summary": "Mempool Blocks Fees",
                "description": "Returns current mempool as projected blocks.",
                "responses": {
                    "200": {
                        "description": "A list of virtual blocks representing estimated mempool blocks.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MempoolBlocksFees"
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Mempool"]
            }
        },
        "/v1/fees/recommended": {
            "get": {
                "summary": "Recommended Fees",
                "description": "Returns our currently suggested fees for new transactions.",
                "responses": {
                    "200": {
                        "description": "Recommended fee rates in sat/vB.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeeRecommendations"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "fastestFee": 25,
                                            "halfHourFee": 20,
                                            "hourFee": 15
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tags": ["Fees"]
            }
        },
        "/v1/cpfp": {
            "get": {
                "summary": "Children Pay for Parent",
                "description": "Returns the ancestors and the best descendant fees for a transaction.",
                "responses": {
                    "200": {
                        "description": "CPFP recommendation data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CpfpRecommendation"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found or not eligible for CPFP."
                    }
                },
                "tags": ["Fees"]
            }
        },
        "/tx/{txid}": {
            "get": {
                "summary": "Transaction",
                "description": "Returns details about a transaction. Available fields: txid, version, locktime, size, weight, fee, vin, vout, and status.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The transaction ID to look up."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction details retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Transaction"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/hex": {
            "get": {
                "summary": "Transaction Hex",
                "description": "Returns a transaction serialized as hex.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "description": "Transaction ID of the transaction to fetch.",
                        "schema": {
                            "type": "string",
                            "example": "4b0d2a...bfa2"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw transaction hex string.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionHex"
                                },
                                "example": "02000000000101ad0c...00000000"
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/merkleblock-proof": {
            "get": {
                "summary": "Transaction Merkleblock Proof",
                "description": "Returns a merkle inclusion proof for the transaction using bitcoind's merkleblock format.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2e95ff9094df9f3650e3f2abc189250760162be89a88f9f2f23301c7cb14b8b4"
                        },
                        "description": "The transaction ID to retrieve the merkleblock proof for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merkleblock proof in binary format (as raw hex string)",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "Raw merkleblock proof binary data"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid txid format"
                    },
                    "404": {
                        "description": "Transaction not found or not confirmed"
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/merkle-proof": {
            "get": {
                "summary": "Transaction Merkle Proof",
                "description": "Returns a merkle inclusion proof for the transaction using Electrum's blockchain.transaction.get_merkle format.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The transaction ID to get the merkle proof for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Merkle inclusion proof data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MerkleProof"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "block_height": 776302,
                                            "merkle": [
                                                "4a5e1e4b...",
                                                "b5b4e9f0..."
                                            ],
                                            "pos": 142
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found or not confirmed."
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/outspend/{vout}": {
            "get": {
                "summary": "Transaction Outspend",
                "description": "Returns the spending status of a transaction output. Available fields: spent (boolean), txid (optional), vin (optional), and status (optional, the status of the spending tx).",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Transaction ID of the parent transaction."
                    },
                    {
                        "name": "vout",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The output index within the transaction."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Spending status of the transaction output.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TxOutspend"
                                },
                                "examples": {
                                    "spent": {
                                        "value": {
                                            "spent": true,
                                            "txid": "abcdef123456...",
                                            "vin": 1,
                                            "status": {
                                                "confirmed": true,
                                                "block_height": 786000,
                                                "block_hash": "0000000000000000000abc...",
                                                "block_time": 1700000000
                                            }
                                        }
                                    },
                                    "unspent": {
                                        "value": {
                                            "spent": false
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction or output not found."
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/outspends": {
            "get": {
                "summary": "Transaction Outspends",
                "description": "Returns the spending status of all transaction outputs.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "description": "The transaction ID (txid) to query.",
                        "schema": {
                            "type": "string",
                            "example": "f854aeb44e44dc207c56c7f23b84e517ac7e1d0b4529db9adfb76b14f8c0efcb"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Spending status for each output in the transaction.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Outspend"
                                    }
                                },
                                "examples": {
                                    "example": {
                                        "value": [
                                            {
                                                "spent": true,
                                                "txid": "1a2b3c...",
                                                "vin": 0,
                                                "status": {
                                                    "confirmed": true,
                                                    "block_height": 776300,
                                                    "block_hash": "0000000000000000000b4d0a...",
                                                    "block_time": 1686300000
                                                }
                                            },
                                            {
                                                "spent": false
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found."
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/raw": {
            "get": {
                "summary": "Transaction Raw",
                "description": "Returns a transaction as binary data.",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The transaction ID."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Raw transaction hex string.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "0200000000010124..."
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/tx/{txid}/rbf": {
            "get": {
                "summary": "Transaction RBF Timeline",
                "description": "Returns the RBF tree timeline of a transaction.",
                "tags": ["Transactions"],
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2e95ff9094df9f3650e3f2abc189250760162be89a88f9f2f23301c7cb14b8b4"
                        },
                        "description": "The transaction ID to trace RBF replacements for."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RBF replacement timeline for the transaction.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RbfReplacementRoot"
                                },
                                "examples": {
                                    "example": {
                                        "value": {
                                            "replacements": {
                                                "tx": {
                                                    "txid": "2e95ff9094df9f3650e3f2abc189250760162be89a88f9f2f23301c7cb14b8b4",
                                                    "fee": 1668,
                                                    "vsize": 276.75,
                                                    "value": 14849,
                                                    "rate": 4.8242,
                                                    "rbf": false,
                                                    "fullRbf": true
                                                },
                                                "time": 1703240261,
                                                "fullRbf": true,
                                                "replaces": []
                                            },
                                            "replaces": [
                                                "3f4670463daadffed07d7a1060071b07f7e81a2566eca21d78bb513cbf21c82a",
                                                "92f9b4f719d0ffc9035d3a9767d80c940cecbc656df2243bafd33f52b583ee92"
                                            ]
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found or no RBF history available"
                    }
                }
            }
        },
        "/tx/{txid}/status": {
            "get": {
                "summary": "Transaction Status",
                "description": "Returns the confirmation status of a transaction. Available fields: confirmed (boolean), block_height (optional), and block_hash (optional).",
                "parameters": [
                    {
                        "name": "txid",
                        "in": "path",
                        "required": true,
                        "description": "Transaction ID to query.",
                        "schema": {
                            "type": "string",
                            "example": "e3c...abc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction confirmation status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionStatus"
                                },
                                "examples": {
                                    "confirmed": {
                                        "value": {
                                            "confirmed": true,
                                            "block_height": 776402,
                                            "block_hash": "000000000000000000015fc7f9e5caa8b2e7cbfc7c8075c23f8c86f1aaed18e6"
                                        }
                                    },
                                    "unconfirmed": {
                                        "value": {
                                            "confirmed": false
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/v1/transaction-times": {
            "get": {
                "summary": "Transaction Times",
                "description": "Returns the timestamps when a list of unconfirmed transactions was initially observed in the mempool. If a transaction is not found in the mempool or has been mined, the timestamp will be 0.",
                "tags": ["Transactions"],
                "responses": {
                    "200": {
                        "description": "Transaction propagation timestamps.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionTimes"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            }
        },
        "/tx": {
            "post": {
                "summary": "Broadcast raw transaction",
                "description": "Broadcast a raw transaction to the network. The transaction should be provided as hex in the request body. The txid will be returned on success.",
                "requestBody": {
                    "description": "Hex-encoded raw transaction data.",
                    "required": true,
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string",
                                "example": "02000000000101c3..."
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns the transaction ID (txid) if successfully broadcast.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BroadcastResponse"
                                },
                                "examples": {
                                    "success": {
                                        "value": {
                                            "txid": "4d1b9a...."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid transaction format or missing body."
                    },
                    "500": {
                        "description": "Internal server error while processing the transaction."
                    }
                },
                "tags": ["Transactions"]
            }
        },
        "/asset/{asset_id}/supply": {
            "get": {
                "summary": "GET /asset/:asset_id/supply",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                }
            }
        },
        "/asset/{asset_id}/supply/decimal": {
            "get": {
                "summary": "GET /asset/:asset_id/supply/decimal",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                }
            }
        },
        "/assets/registry": {
            "get": {
                "summary": "GET /assets/registry",
                "responses": {
                    "200": {
                        "description": "Successful response"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AddressInfo": {
                "type": "object",
                "properties": {
                    "address": {
                        "type": "string"
                    },
                    "chain_stats": {
                        "$ref": "#/components/schemas/AddressStats"
                    },
                    "mempool_stats": {
                        "$ref": "#/components/schemas/AddressStats"
                    }
                },
                "required": ["address", "chain_stats", "mempool_stats"]
            },
            "AddressStats": {
                "type": "object",
                "properties": {
                    "tx_count": {
                        "type": "integer"
                    },
                    "funded_txo_count": {
                        "type": "integer"
                    },
                    "funded_txo_sum": {
                        "type": "integer"
                    },
                    "spent_txo_count": {
                        "type": "integer"
                    },
                    "spent_txo_sum": {
                        "type": "integer"
                    }
                },
                "required": [
                    "tx_count",
                    "funded_txo_count",
                    "funded_txo_sum",
                    "spent_txo_count",
                    "spent_txo_sum"
                ]
            },
            "AddressValidation": {
                "type": "object",
                "properties": {
                    "isvalid": { "type": "boolean" },
                    "address": { "type": "string" },
                    "scriptPubKey": { "type": "string" },
                    "isscript": { "type": "boolean" },
                    "iswitness": { "type": "boolean" },
                    "type": { "type": "string" }
                },
                "required": ["isvalid"]
            },
            "Block": {
                "type": "object",
                "properties": {
                    "id": { "type": "string", "description": "Block hash" },
                    "height": { "type": "integer" },
                    "version": { "type": "integer" },
                    "timestamp": { "type": "integer" },
                    "mediantime": { "type": "integer" },
                    "bits": { "type": "integer" },
                    "nonce": { "type": "integer" },
                    "difficulty": { "type": "number" },
                    "merkle_root": { "type": "string" },
                    "tx_count": { "type": "integer" },
                    "size": { "type": "integer" },
                    "weight": { "type": "integer" },
                    "previousblockhash": { "type": "string" },
                    "extras": {
                        "type": "object",
                        "description": "Optional explorer-specific metadata"
                    }
                },
                "required": [
                    "id",
                    "height",
                    "version",
                    "timestamp",
                    "bits",
                    "nonce",
                    "merkle_root",
                    "tx_count",
                    "size",
                    "weight",
                    "previousblockhash"
                ]
            },
            "BlockV1": {
                "type": "object",
                "properties": {
                    "id": { "type": "string" },
                    "height": { "type": "integer" },
                    "version": { "type": "integer" },
                    "timestamp": { "type": "integer" },
                    "mediantime": { "type": "integer" },
                    "bits": { "type": "integer" },
                    "nonce": { "type": "integer" },
                    "difficulty": { "type": "number" },
                    "merkle_root": { "type": "string" },
                    "tx_count": { "type": "integer" },
                    "size": { "type": "integer" },
                    "weight": { "type": "integer" },
                    "previousblockhash": { "type": "string" },
                    "extras": {
                        "type": "object",
                        "properties": {
                            "pool": {
                                "type": "object",
                                "properties": {
                                    "name": { "type": "string" },
                                    "url": { "type": "string" }
                                }
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "height",
                    "timestamp",
                    "bits",
                    "nonce",
                    "tx_count",
                    "size",
                    "weight",
                    "previousblockhash"
                ]
            },
            "BlockHash": {
                "type": "string",
                "description": "SHA-256 hash of the latest block"
            },
            "BlockHeader": {
                "type": "string",
                "description": "Hex-encoded string representing the block header (80 bytes, 160 hex characters)"
            },
            "BlockHeight": {
                "type": "integer",
                "example": 850302,
                "description": "Height of the latest block on the best blockchain tip"
            },
            "BlockStatus": {
                "type": "object",
                "properties": {
                    "in_best_chain": {
                        "type": "boolean",
                        "description": "Whether the block is part of the best (main) chain"
                    },
                    "next_best": {
                        "type": ["string", "null"],
                        "description": "Hash of the next block, if available"
                    }
                },
                "required": ["in_best_chain"]
            },
            "BlockTxids": {
                "type": "array",
                "items": {
                    "type": "string",
                    "description": "A transaction ID (txid)"
                },
                "example": [
                    "5a7a9fe2c911c482c89a7ea1dbf35a7c9b68892ec5b2d92e93858a9f4a85b08e",
                    "b1fea5241d34b276c3f8a5a934ae9e5e2bb23ecad1c7426ec1dfde3e07aa55a9"
                ]
            },
            "BlockFeePercentiles": {
                "type": "object",
                "properties": {
                    "min": { "type": "number" },
                    "perc_10": { "type": "number" },
                    "perc_25": { "type": "number" },
                    "perc_50": { "type": "number" },
                    "perc_75": { "type": "number" },
                    "perc_90": { "type": "number" },
                    "max": { "type": "number" }
                }
            },
            "BlockStats": {
                "type": "object",
                "properties": {
                    "height": { "type": "integer" },
                    "hash": { "type": "string" },
                    "timestamp": { "type": "integer" },
                    "median_timestamp": { "type": "integer" },
                    "previous_block_hash": { "type": "string" },
                    "difficulty": { "type": "number" },
                    "header": { "type": "string" },
                    "version": { "type": "integer" },
                    "bits": { "type": "integer" },
                    "nonce": { "type": "integer" },
                    "size": { "type": "integer" },
                    "weight": { "type": "integer" },
                    "tx_count": { "type": "integer" },
                    "merkle_root": { "type": "string" },
                    "reward": { "type": "integer" },
                    "total_fee_amt": { "type": "integer" },
                    "avg_fee_amt": { "type": "integer" },
                    "median_fee_amt": { "type": "integer" },
                    "fee_amt_percentiles": {
                        "$ref": "#/components/schemas/BlockFeePercentiles"
                    },
                    "avg_fee_rate": { "type": "number" },
                    "median_fee_rate": { "type": "number" },
                    "fee_rate_percentiles": {
                        "$ref": "#/components/schemas/BlockFeePercentiles"
                    },
                    "total_inputs": { "type": "integer" },
                    "total_input_amt": { "type": "integer" },
                    "total_outputs": { "type": "integer" },
                    "total_output_amt": { "type": "integer" },
                    "segwit_total_txs": { "type": "integer" },
                    "segwit_total_size": { "type": "integer" },
                    "segwit_total_weight": { "type": "integer" },
                    "avg_tx_size": { "type": "number" },
                    "utxoset_change": { "type": "integer" },
                    "utxoset_size": { "type": "integer" },
                    "coinbase_raw": { "type": "string" },
                    "coinbase_address": { "type": ["string", "null"] },
                    "coinbase_signature": { "type": "string" },
                    "coinbase_signature_ascii": { "type": "string" },
                    "pool_slug": { "type": "string" },
                    "orphans": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                }
            },
            "BlockStatsArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/BlockStats"
                }
            },
            "MiningPool": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the mining pool"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of blocks mined by this pool in the recent window"
                    },
                    "url": {
                        "type": "string",
                        "description": "Optional URL of the mining pool",
                        "nullable": true
                    }
                },
                "required": ["name", "count"]
            },
            "MiningPoolHashrate": {
                "type": "object",
                "properties": {
                    "pool_name": {
                        "type": "string",
                        "description": "The name of the mining pool."
                    },
                    "hashrate": {
                        "type": "number",
                        "description": "Estimated hashrate of the pool in EH/s."
                    },
                    "blocks_mined": {
                        "type": "integer",
                        "description": "Number of blocks mined by this pool during the interval."
                    },
                    "percent": {
                        "type": "number",
                        "description": "Percentage of network hashrate attributed to the pool."
                    }
                },
                "required": ["pool_name", "hashrate", "blocks_mined", "percent"]
            },
            "Hashrate": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "integer"
                    },
                    "hashrate": {
                        "type": "number"
                    },
                    "window": {
                        "type": "string"
                    }
                }
            },
            "DifficultyAdjustment": {
                "type": "object",
                "properties": {
                    "current": {
                        "type": "number",
                        "description": "Current network difficulty"
                    },
                    "next": {
                        "type": "number",
                        "description": "Estimated next difficulty"
                    },
                    "adjustment": {
                        "type": "number",
                        "description": "Estimated percentage change in difficulty"
                    },
                    "blocks_remaining": {
                        "type": "integer",
                        "description": "Blocks remaining until next difficulty retarget"
                    },
                    "estimated_date": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Estimated date/time of the next difficulty adjustment"
                    }
                },
                "required": [
                    "current",
                    "next",
                    "adjustment",
                    "blocks_remaining",
                    "estimated_date"
                ]
            },
            "HashratePoint": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "type": "integer",
                        "description": "Unix timestamp of the data point"
                    },
                    "hashrate": {
                        "type": "number",
                        "description": "Estimated hashrate in EH/s (exahashes per second)"
                    }
                },
                "required": ["timestamp", "hashrate"]
            },
            "HashrateData": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/HashratePoint"
                }
            },
            "RewardStats": {
                "type": "object",
                "properties": {
                    "avgFee": {
                        "type": "number",
                        "description": "Average total fee in recent blocks (in satoshis)"
                    },
                    "avgTxs": {
                        "type": "number",
                        "description": "Average number of transactions per block"
                    },
                    "avgFeesPerVsize": {
                        "type": "number",
                        "description": "Average fees per virtual byte (sat/vB)"
                    },
                    "avgWeight": {
                        "type": "number",
                        "description": "Average block weight units"
                    },
                    "avgValue": {
                        "type": "number",
                        "description": "Average total reward per block (subsidy + fees) in satoshis"
                    },
                    "subsidy": {
                        "type": "integer",
                        "description": "Current Bitcoin block subsidy in satoshis"
                    }
                },
                "required": [
                    "avgFee",
                    "avgTxs",
                    "avgFeesPerVsize",
                    "avgWeight",
                    "avgValue",
                    "subsidy"
                ]
            },
            "BlockFeeSummary": {
                "type": "object",
                "properties": {
                    "fee_range": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Array of fee amounts (in sats) from lowest to highest for all non-coinbase transactions."
                    },
                    "vsize_range": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Array of virtual sizes corresponding to each transaction."
                    },
                    "total_fees": {
                        "type": "integer",
                        "description": "Total fee (in sats) paid by all non-coinbase transactions in the block."
                    },
                    "avg_fee": {
                        "type": "integer",
                        "description": "Average fee (in sats)."
                    },
                    "avg_fee_rate": {
                        "type": "number",
                        "description": "Average fee rate (in sat/vByte)."
                    },
                    "median_fee": {
                        "type": "integer",
                        "description": "Median fee (in sats)."
                    },
                    "median_fee_rate": {
                        "type": "number",
                        "description": "Median fee rate (in sat/vByte)."
                    },
                    "tx_count": {
                        "type": "integer",
                        "description": "Number of non-coinbase transactions in the block."
                    }
                },
                "required": [
                    "fee_range",
                    "vsize_range",
                    "total_fees",
                    "avg_fee",
                    "avg_fee_rate",
                    "median_fee",
                    "median_fee_rate",
                    "tx_count"
                ]
            },
            "BlockReward": {
                "type": "object",
                "properties": {
                    "coinbaseHeight": {
                        "type": "integer",
                        "description": "Block height as included in the coinbase transaction."
                    },
                    "totalFees": {
                        "type": "integer",
                        "description": "Total transaction fees in the block (in satoshis)."
                    },
                    "txCount": {
                        "type": "integer",
                        "description": "Number of transactions in the block."
                    },
                    "miner": {
                        "type": "string",
                        "description": "Miner name if known (from known pool tags), otherwise may be null."
                    },
                    "value": {
                        "type": "integer",
                        "description": "Total reward value (subsidy + fees) in satoshis."
                    }
                },
                "required": ["coinbaseHeight", "totalFees", "txCount", "value"]
            },
            "FeeRateList": {
                "type": "array",
                "items": {
                    "type": "number",
                    "format": "float",
                    "description": "Fee rate in satoshis per vbyte"
                },
                "example": [75.23, 64.88, 18.5, 10.42, 1.21]
            },
            "MempoolBlockPrediction": {
                "type": "object",
                "properties": {
                    "blockSize": {
                        "type": "integer",
                        "description": "Size of the predicted block in bytes."
                    },
                    "blockVSize": {
                        "type": "integer",
                        "description": "Virtual size in vbytes."
                    },
                    "nTx": {
                        "type": "integer",
                        "description": "Number of transactions expected in this block."
                    },
                    "totalFees": {
                        "type": "integer",
                        "description": "Total fees in sats."
                    },
                    "feeRange": {
                        "type": "array",
                        "items": { "type": "integer" },
                        "description": "Min and max fee rate in sat/vB for transactions in this block."
                    }
                },
                "required": [
                    "blockSize",
                    "blockVSize",
                    "nTx",
                    "totalFees",
                    "feeRange"
                ]
            },
            "MempoolBlocksFees": {
                "type": "object",
                "properties": {
                    "blockSize": {
                        "type": "integer",
                        "description": "Estimated size of the virtual block in bytes"
                    },
                    "blockVSize": {
                        "type": "integer",
                        "description": "Estimated virtual size of the virtual block in vbytes"
                    },
                    "nTx": {
                        "type": "integer",
                        "description": "Number of transactions projected in the block"
                    },
                    "totalFees": {
                        "type": "integer",
                        "description": "Total fees in satoshis for transactions in this block"
                    },
                    "medianFee": {
                        "type": "number",
                        "description": "Median fee rate in sat/vB"
                    },
                    "feeRange": {
                        "type": "array",
                        "items": { "type": "number" },
                        "description": "List of fee rates (in sat/vB) from lowest to highest in this block"
                    }
                },
                "required": [
                    "blockSize",
                    "blockVSize",
                    "nTx",
                    "totalFees",
                    "medianFee",
                    "feeRange"
                ]
            },
            "BlockAudit": {
                "type": "object",
                "properties": {
                    "hash": { "type": "string" },
                    "height": { "type": "integer" },
                    "score": { "type": "integer" },
                    "mined_by": { "type": "string" },
                    "validity": {
                        "type": "object",
                        "properties": {
                            "timestamp_valid": { "type": "boolean" },
                            "coinbase_valid": { "type": "boolean" },
                            "difficulty_valid": { "type": "boolean" }
                        }
                    },
                    "errors": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                },
                "required": ["hash", "height", "score", "mined_by", "validity"]
            },
            "AuditScore": {
                "type": "object",
                "properties": {
                    "height": {
                        "type": "integer",
                        "description": "Block height"
                    },
                    "hash": {
                        "type": "string",
                        "description": "Block hash"
                    },
                    "timestamp": {
                        "type": "integer",
                        "description": "Block timestamp (UNIX epoch seconds)"
                    },
                    "propagation": {
                        "type": "number",
                        "description": "Estimated propagation delay in seconds"
                    },
                    "size": {
                        "type": "integer",
                        "description": "Size of the block in bytes"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "Weight units of the block"
                    },
                    "tx_count": {
                        "type": "integer",
                        "description": "Number of transactions in the block"
                    },
                    "score": {
                        "type": "number",
                        "description": "Audit score for the block (0–1, where 1 is best)"
                    }
                },
                "required": [
                    "height",
                    "hash",
                    "timestamp",
                    "propagation",
                    "size",
                    "weight",
                    "tx_count",
                    "score"
                ]
            },
            "BlockAuditSummary": {
                "type": "object",
                "properties": {
                    "blockHeight": { "type": "integer" },
                    "blockHash": { "type": "string" },
                    "miner": { "type": "string" },
                    "coinbaseRecipient": { "type": "string" },
                    "totalFees": {
                        "type": "integer",
                        "description": "in satoshis"
                    },
                    "totalFeesUsd": {
                        "type": "number",
                        "description": "USD estimate at time of block"
                    },
                    "blockReward": {
                        "type": "integer",
                        "description": "in satoshis"
                    },
                    "blockRewardUsd": {
                        "type": "number",
                        "description": "USD estimate at time of block"
                    },
                    "subsidy": {
                        "type": "integer",
                        "description": "in satoshis"
                    },
                    "subsidyUsd": {
                        "type": "number",
                        "description": "USD estimate"
                    },
                    "numInputs": { "type": "integer" },
                    "numOutputs": { "type": "integer" },
                    "inputsTotal": {
                        "type": "integer",
                        "description": "in satoshis"
                    },
                    "outputsTotal": {
                        "type": "integer",
                        "description": "in satoshis"
                    },
                    "spendingToSelf": { "type": "integer" },
                    "spendingToSelfUsd": { "type": "number" },
                    "spendingToOthers": { "type": "integer" },
                    "spendingToOthersUsd": { "type": "number" },
                    "timestamp": { "type": "integer" }
                },
                "required": [
                    "blockHeight",
                    "blockHash",
                    "miner",
                    "coinbaseRecipient",
                    "totalFees",
                    "blockReward",
                    "timestamp"
                ]
            },
            "RbfTransaction": {
                "type": "object",
                "properties": {
                    "txid": { "type": "string" },
                    "fee": { "type": "integer" },
                    "vsize": { "type": "number" },
                    "value": { "type": "integer" },
                    "rate": { "type": "number" },
                    "rbf": { "type": "boolean" },
                    "fullRbf": { "type": "boolean" }
                },
                "required": ["txid", "fee", "vsize", "value", "rate", "rbf"]
            },
            "RbfReplacedTx": {
                "type": "object",
                "properties": {
                    "tx": { "$ref": "#/components/schemas/RbfTransaction" },
                    "time": { "type": "integer" },
                    "interval": { "type": "integer" },
                    "fullRbf": { "type": "boolean" },
                    "replaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RbfReplacedTx"
                        }
                    }
                },
                "required": ["tx", "time", "fullRbf", "replaces"]
            },
            "RbfReplacementRoot": {
                "type": "object",
                "properties": {
                    "replacements": {
                        "type": "object",
                        "properties": {
                            "tx": {
                                "$ref": "#/components/schemas/RbfTransaction"
                            },
                            "time": { "type": "integer" },
                            "fullRbf": { "type": "boolean" },
                            "replaces": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/RbfReplacedTx"
                                }
                            }
                        },
                        "required": ["tx", "time", "fullRbf", "replaces"]
                    },
                    "replaces": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                },
                "required": ["replacements", "replaces"]
            },
            "FullRbfStats": {
                "type": "object",
                "properties": {
                    "total": {
                        "type": "integer",
                        "description": "Total number of transactions in the mempool."
                    },
                    "fullRBF": {
                        "type": "integer",
                        "description": "Number of transactions marked as full-RBF."
                    },
                    "optInRBF": {
                        "type": "integer",
                        "description": "Number of transactions marked as opt-in RBF (BIP125)."
                    },
                    "nonRBF": {
                        "type": "integer",
                        "description": "Number of transactions that are not RBF."
                    }
                },
                "required": ["total", "fullRBF", "optInRBF", "nonRBF"]
            },
            "CpfpRecommendation": {
                "type": "object",
                "properties": {
                    "vsize": {
                        "type": "integer",
                        "description": "Virtual size of the child transaction in vbytes."
                    },
                    "fee": {
                        "type": "integer",
                        "description": "Required fee for the child transaction in satoshis."
                    },
                    "totalVsize": {
                        "type": "integer",
                        "description": "Total virtual size of parent + child transaction."
                    },
                    "totalFee": {
                        "type": "integer",
                        "description": "Total required fee for parent + child."
                    },
                    "rate": {
                        "type": "number",
                        "description": "Effective fee rate (sat/vB) for parent + child."
                    },
                    "minRelayFee": {
                        "type": "integer",
                        "description": "Minimum relay fee required for the transaction to be accepted into the mempool."
                    },
                    "error": {
                        "type": ["string", "null"],
                        "description": "Error message if CPFP recommendation could not be provided."
                    }
                },
                "required": [
                    "vsize",
                    "fee",
                    "totalVsize",
                    "totalFee",
                    "rate",
                    "minRelayFee",
                    "error"
                ]
            },
            "Transaction": {
                "type": "object",
                "properties": {
                    "txid": { "type": "string" },
                    "version": { "type": "integer" },
                    "locktime": { "type": "integer" },
                    "size": { "type": "integer" },
                    "weight": { "type": "integer" },
                    "fee": { "type": "integer" },
                    "vin": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "txid": { "type": "string" },
                                "vout": { "type": "integer" },
                                "is_coinbase": { "type": "boolean" },
                                "scriptsig": { "type": "string" },
                                "scriptsig_asm": { "type": "string" },
                                "sequence": { "type": "integer" },
                                "witness": {
                                    "type": "array",
                                    "items": { "type": "string" }
                                },
                                "prevout": {
                                    "type": "object",
                                    "properties": {
                                        "scriptpubkey": {
                                            "type": "string"
                                        },
                                        "scriptpubkey_asm": {
                                            "type": "string"
                                        },
                                        "scriptpubkey_type": {
                                            "type": "string"
                                        },
                                        "scriptpubkey_address": {
                                            "type": "string"
                                        },
                                        "value": { "type": "integer" }
                                    }
                                }
                            }
                        }
                    },
                    "vout": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "scriptpubkey": { "type": "string" },
                                "scriptpubkey_asm": { "type": "string" },
                                "scriptpubkey_type": { "type": "string" },
                                "scriptpubkey_address": {
                                    "type": "string"
                                },
                                "value": { "type": "integer" }
                            }
                        }
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "confirmed": { "type": "boolean" },
                            "block_height": { "type": "integer" },
                            "block_hash": { "type": "string" },
                            "block_time": { "type": "integer" }
                        }
                    }
                },
                "required": ["txid", "vin", "vout", "status"]
            },
            "TransactionHex": {
                "type": "string",
                "description": "Raw hexadecimal representation of the Bitcoin transaction."
            },
            "TransactionStatus": {
                "type": "object",
                "properties": {
                    "confirmed": {
                        "type": "boolean"
                    },
                    "block_height": {
                        "type": ["integer", "null"]
                    },
                    "block_hash": {
                        "type": ["string", "null"]
                    }
                }
            },
            "TransactionId": {
                "type": "string",
                "description": "A Bitcoin transaction ID (txid)"
            },
            "MempoolStats": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "description": "Number of transactions in the mempool"
                    },
                    "vsize": {
                        "type": "integer",
                        "description": "Total size of mempool transactions in virtual bytes"
                    },
                    "total_fee": {
                        "type": "integer",
                        "description": "Total fees paid by mempool transactions in satoshis"
                    },
                    "fee_histogram": {
                        "type": "array",
                        "description": "Mempool fee-rate distribution histogram as (feerate, vsize) tuples",
                        "items": {
                            "type": "array",
                            "items": [
                                { "type": "number" },
                                { "type": "integer" }
                            ]
                        }
                    }
                },
                "required": ["count", "vsize", "total_fee", "fee_histogram"]
            },
            "MempoolTxids": {
                "type": "array",
                "items": {
                    "type": "string",
                    "description": "Transaction ID (txid)"
                },
                "description": "Array of transaction IDs currently in the mempool"
            },
            "MempoolRecentTx": {
                "type": "object",
                "properties": {
                    "txid": {
                        "type": "string",
                        "description": "Transaction ID"
                    },
                    "fee": {
                        "type": "integer",
                        "description": "Total fee paid in satoshis"
                    },
                    "vsize": {
                        "type": "integer",
                        "description": "Virtual size of the transaction in vbytes"
                    },
                    "value": {
                        "type": "integer",
                        "description": "Total value transferred in satoshis"
                    }
                },
                "required": ["txid", "fee", "vsize", "value"]
            },
            "MempoolTransactions": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer"
                    },
                    "transactions": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "txid": {
                                    "type": "string"
                                },
                                "fee": {
                                    "type": "integer"
                                },
                                "size": {
                                    "type": "integer"
                                },
                                "time": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                }
            },
            "FeeEstimates": {
                "type": "object",
                "additionalProperties": {
                    "type": "number"
                }
            },
            "FeeRecommendations": {
                "type": "object",
                "properties": {
                    "fastestFee": {
                        "type": "integer",
                        "description": "Recommended fee rate for the fastest confirmation (1 block)"
                    },
                    "halfHourFee": {
                        "type": "integer",
                        "description": "Recommended fee rate for confirmation within 3 blocks (~30 minutes)"
                    },
                    "hourFee": {
                        "type": "integer",
                        "description": "Recommended fee rate for confirmation within 6 blocks (~1 hour)"
                    }
                },
                "required": ["fastestFee", "halfHourFee", "hourFee"]
            },
            "MerkleProof": {
                "type": "object",
                "properties": {
                    "block_height": {
                        "type": "integer",
                        "description": "Block height where the transaction was included."
                    },
                    "merkle": {
                        "type": "array",
                        "description": "Merkle branch hashes proving the inclusion of the transaction.",
                        "items": {
                            "type": "string"
                        }
                    },
                    "pos": {
                        "type": "integer",
                        "description": "Position of the transaction in the block's merkle tree."
                    }
                },
                "required": ["block_height", "merkle", "pos"]
            },
            "TxOutspend": {
                "type": "object",
                "properties": {
                    "spent": {
                        "type": "boolean",
                        "description": "Whether the output has been spent."
                    },
                    "txid": {
                        "type": "string",
                        "description": "Transaction ID of the spending transaction.",
                        "nullable": true
                    },
                    "vin": {
                        "type": "integer",
                        "description": "Index of the input in the spending transaction.",
                        "nullable": true
                    },
                    "status": {
                        "type": "object",
                        "description": "Confirmation status of the spending transaction.",
                        "nullable": true,
                        "properties": {
                            "confirmed": { "type": "boolean" },
                            "block_height": { "type": "integer" },
                            "block_hash": { "type": "string" },
                            "block_time": { "type": "integer" }
                        }
                    }
                },
                "required": ["spent"]
            },
            "Outspend": {
                "type": "object",
                "properties": {
                    "spent": {
                        "type": "boolean",
                        "description": "Indicates whether this output has been spent."
                    },
                    "txid": {
                        "type": "string",
                        "nullable": true,
                        "description": "The transaction ID that spent this output, if any."
                    },
                    "vin": {
                        "type": "integer",
                        "nullable": true,
                        "description": "The input index in the spending transaction."
                    },
                    "status": {
                        "type": "object",
                        "nullable": true,
                        "description": "Status of the spending transaction.",
                        "properties": {
                            "confirmed": { "type": "boolean" },
                            "block_height": { "type": "integer" },
                            "block_hash": { "type": "string" },
                            "block_time": { "type": "integer" }
                        }
                    }
                },
                "required": ["spent"]
            },
            "TransactionTimes": {
                "type": "object",
                "properties": {
                    "firstSeen": {
                        "type": "integer",
                        "description": "Unix timestamp when the transaction was first observed"
                    },
                    "addedToMempool": {
                        "type": "integer",
                        "description": "Unix timestamp when the transaction entered the mempool"
                    },
                    "blockTime": {
                        "type": ["integer", "null"],
                        "description": "Unix timestamp when the transaction was confirmed in a block (null if unconfirmed)"
                    }
                },
                "required": ["firstSeen", "addedToMempool"]
            },
            "TxStatus": {
                "type": "object",
                "properties": {
                    "confirmed": {
                        "type": "boolean",
                        "description": "Whether the transaction is confirmed"
                    },
                    "block_height": {
                        "type": ["integer", "null"],
                        "description": "Height of the block containing the transaction (if confirmed)"
                    },
                    "block_hash": {
                        "type": ["string", "null"],
                        "description": "Hash of the block containing the transaction (if confirmed)"
                    }
                },
                "required": ["confirmed"]
            },
            "BroadcastResponse": {
                "type": "object",
                "properties": {
                    "txid": {
                        "type": "string",
                        "description": "Transaction ID of the broadcast transaction."
                    }
                },
                "required": ["txid"]
            },
            "Utxo": {
                "type": "object",
                "properties": {
                    "txid": {
                        "type": "string",
                        "description": "Transaction ID where the UTXO originates."
                    },
                    "vout": {
                        "type": "integer",
                        "description": "Index of the output in the transaction."
                    },
                    "value": {
                        "type": "integer",
                        "description": "Value of the UTXO in satoshis."
                    },
                    "status": {
                        "type": "object",
                        "properties": {
                            "confirmed": { "type": "boolean" },
                            "block_height": { "type": "integer" },
                            "block_hash": { "type": "string" },
                            "block_time": { "type": "integer" }
                        },
                        "required": ["confirmed"]
                    }
                },
                "required": ["txid", "vout", "value", "status"]
            }
        }
    }
}
